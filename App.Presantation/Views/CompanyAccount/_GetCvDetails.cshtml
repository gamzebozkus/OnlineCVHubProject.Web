@model VM_CvAdd

@{
    int cvId = TempData["CvId"] as int? ?? 0;
    var warningMessage = TempData["WarningMessage"] as string;
    var successMessage = TempData["SuccessMessage"] as string;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Template1</title>
    <link href='https://fonts.googleapis.com/css?family=Lato:400,300,700' rel='stylesheet' type='text/css'>
    <link href="~/css/Template1.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
    <link href='https://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'>
    <style>
        /* General button style */
        .btn {
            border: none;
            font-family: 'Lato';
            font-size: inherit;
            color: inherit;
            background: none;
            cursor: pointer;
            padding: 25px 80px;
            display: inline-block;
            margin: 15px 30px;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-weight: 700;
            outline: none;
            position: relative;
            -webkit-transition: all 0.3s;
            -moz-transition: all 0.3s;
            transition: all 0.3s;
        }

            .btn:after {
                content: '';
                position: absolute;
                z-index: -1;
                -webkit-transition: all 0.3s;
                -moz-transition: all 0.3s;
                transition: all 0.3s;
            }

            /* Pseudo elements for icons */
            .btn:before {
                font-family: 'FontAwesome';
                speak: none;
                font-style: normal;
                font-weight: normal;
                font-variant: normal;
                text-transform: none;
                line-height: 1;
                position: relative;
                -webkit-font-smoothing: antialiased;
            }


        /* Icon separator */
        .btn-sep {
            padding: 25px 60px 25px 120px;
        }

            .btn-sep:before {
                background: rgba(0,0,0,0.15);
            }

        /* Button 1 */
        .btn-1 {
            background: #3498db;
            color: #fff;
        }

            .btn-1:hover {
                background: #2980b9;
            }

            .btn-1:active {
                background: #2980b9;
                top: 2px;
            }

            .btn-1:before {
                position: absolute;
                height: 100%;
                left: 0;
                top: 0;
                line-height: 3;
                font-size: 140%;
                width: 60px;
            }

        /* Button 2 */
        .btn-2 {
            background: #2ecc71;
            color: #fff;
        }

            .btn-2:hover {
                background: #27ae60;
            }

            .btn-2:active {
                background: #27ae60;
                top: 2px;
            }

            .btn-2:before {
                position: absolute;
                height: 100%;
                left: 0;
                top: 0;
                line-height: 3;
                font-size: 140%;
                width: 60px;
            }

        /* Button 3 */
        .btn-3 {
            background: #e74c3c;
            color: #fff;
        }

            .btn-3:hover {
                background: #c0392b;
            }

            .btn-3:active {
                background: #c0392b;
                top: 2px;
            }

            .btn-3:before {
                position: absolute;
                height: 100%;
                left: 0;
                top: 0;
                line-height: 3;
                font-size: 140%;
                width: 60px;
            }

        /* Button 3 */
        .btn-4 {
            background: #34495e;
            color: #fff;
        }

            .btn-4:hover {
                background: #2c3e50;
            }

            .btn-4:active {
                background: #2c3e50;
                top: 2px;
            }

            .btn-4:before {
                position: absolute;
                height: 100%;
                left: 0;
                top: 0;
                line-height: 3;
                font-size: 140%;
                width: 60px;
            }

        /* Icons */

        .icon-cart:before {
            content: "\f07a";
        }

        .icon-heart:before {
            content: "\f004";
        }

        .icon-info:before {
            content: "\f05a";
        }

        .icon-send:before {
            content: "\f1d8";
        }
    </style>
</head>
<body>
    @if (!string.IsNullOrEmpty(warningMessage))
    {
        @*  <script type="text/javascript">
    window.onload = function () {
    alert("@warningMessage");
    };
    </script>*@
        <div class="alert alert-danger" role="alert">
            @warningMessage
        </div>
    }
     @if (!string.IsNullOrEmpty(successMessage))
    {
        @*<script type="text/javascript">
            window.onload = function () {
                alert("@successMessage");
            };
        </script>*@
        <div class="alert alert-success" role="alert">
            @successMessage
        </div>
    }
    <div class="container">
    @using (Html.BeginForm("Kaydet", "CompanyAccount", FormMethod.Post))
    {
        <input type="hidden" name="CvId" value="@cvId" />
        <input type="hidden" name="CompanyId" value="@TempData["CompanyId"]" />
        <input type="hidden" name="DepartmentId" value="@TempData["DepartmanId"]" />

            <button type="submit" class="btn btn-3 btn-sep icon-heart">Kaydet</button>
    }
  
        <div class="header">
            <div class="full-name">
                 <span class="first-name">@Model.CvNameSurname</span>
                
            </div>
            <div class="contact-info">
                <span class="email">Email: </span>
                  <span class="email-val">@Model.Email</span>
                <span class="separator"></span>
               <span class="phone">Adres: </span>
                 <span class="phone-val">@Model.Address</span>
            </div>

            <div class="about">
                <span class="position">@Model.Title </span>
                <span class="desc">
                      @Model.Summary
                </span>
            </div>
        </div>
        <div class="details">
            <div class="section">
                <div class="section__title">Deneyim</div>
                <div class="section__list">
                      @foreach (var exp in Model.Experiences)
                    {
                    <div class="section__list-item">
                    <div class="left">
                    <div class="name">@exp.Position</div>
                    <div class="addr">@exp.Company</div>
                    <div class="addr">@exp.Responsibilities</div>
                    <div class="duration">
                    @(exp.StartDate.HasValue ? exp.StartDate.Value.Date.ToString("MM/yyyy") : "")
                    -
                    @(exp.EndDate.HasValue ? exp.EndDate.Value.Date.ToString("MM/yyyy") : "")
                    </div>
                    </div>

                    </div>
                    }
                    


                </div>
            </div>
            <div class="section">
                <div class="section__title">Eğitim Bilgisi</div>
                <div class="section__list">
                     @foreach (var edu in Model.EducationInfos)
                    {
                    <div class="section__list-item">
                    <div class="left">
                    <div class="name">@edu.Major</div>
                    <div class="addr">
                    @edu.School - @edu.Degree
                    <br>
                    @(edu.StartDate.HasValue ? edu.StartDate.Value.Date.ToString("MM/yyyy") : "")
                    -
                    @(edu.EndDate.HasValue ? edu.EndDate.Value.Date.ToString("MM/yyyy") : "")
                    </div>

                    </div>

                    </div>
                    }

                </div>

            </div>

            <div class="section">
                <div class="section__title">Beceri/Yetenek</div>
                <div class="skills">
                     @foreach (var skill in Model.Skills)
                    {
                    <div class="skills__item">
                    <div class="left">
                    <div class="name">
                    @skill.SkillName
                    </div>
                    </div>

                    </div>
                    }

                </div>


            </div>
            <div class="section">
                <div class="section__title">Hobi</div>
                <div class="section__list">
                    @foreach (var hobby in Model.Hobbies)
                    {
                    <div class="section__list-item">
                    <div class="name">@hobby.HobbyName</div>
                    </div>
                    }
                    
                </div>
            </div>

        </div>
    </div>


   
</body>
</html>

